{"version":3,"sources":["modals.js","stopwatch.js"],"names":["modalEvent","button","addEventListener","modalIgnition","getAttribute","modal","document","querySelector","modalContainer","modalClose","classList","toggle","element","stopPropagation","remove","buttons","querySelectorAll","Stopwatch","[object Object]","display","this","timerRunning","timerDisplay","reset","print","times","time","performance","now","requestAnimationFrame","step","bind","start","timestamp","difference","formatHelper","Math","floor","innerText","formatting","calculate","input","count","result","toString","length","stopwatch"],"mappings":"AAEA,SAAAA,WAAAC,GACAA,EAAAC,iBAAA,QAAA,KACA,MAAAC,EAAAF,EAAAG,aAAA,uBACAC,EAAAC,SAAAC,6BAAAJ,MACAK,EAAAH,EAAAE,cAAA,kBACAE,EAAAJ,EAAAE,cAAA,gBAGAF,EAAAK,UAAAC,OAAA,QAGAH,EAAAN,iBAAA,QAAAU,IACAA,EAAAC,oBAIAJ,EAAAP,iBAAA,QAAA,KACAG,EAAAK,UAAAI,OAAA,YAUA,MAAAC,QAAAT,SAAAU,iBAAA,+BAEA,IAAA,IAAAf,KAAAc,QACAf,WAAAC,GC9BA,MAAAgB,UAEAC,YAAAC,GACAC,KAAAC,cAAA,EACAD,KAAAE,aAAAH,EACAC,KAAAG,QACAH,KAAAI,MAAAJ,KAAAK,OAGAP,QAEAE,KAAAM,OACAN,KAAAM,KAAAC,YAAAC,OAIAR,KAAAC,eAEAD,KAAAC,cAAA,EAEAQ,sBAAAT,KAAAU,KAAAC,KAAAX,QAIAF,QAEAE,KAAAC,cAAA,EAEAD,KAAAM,KAAA,KAGAR,QAEAE,KAAAK,MAAA,CAAA,EAAA,EAAA,GAGAP,UACAE,KAAAY,QACAZ,KAAAG,QAGAL,UAAAe,GAEA,IAAAC,EAAAD,EAAAb,KAAAM,KAGAN,KAAAK,MAAA,IAAAS,EAAA,GAGAd,KAAAK,MAAA,IAAA,MACAL,KAAAK,MAAA,IAAA,EACAL,KAAAK,MAAA,IAAA,KAIAL,KAAAK,MAAA,IAAA,KACAL,KAAAK,MAAA,IAAA,EACAL,KAAAK,MAAA,IAAA,IAIAP,WAAAO,GAEA,SAAAU,aAAAV,EAAA,GAAA,MAAAU,aAAAV,EAAA,GAAA,MAAAU,aAAAC,KAAAC,MAAAZ,EAAA,IAAA,KAGAP,QAEAE,KAAAE,aAAAgB,UAAAlB,KAAAmB,WAAAnB,KAAAK,OAGAP,KAAAe,GAEAb,KAAAC,eAKAD,KAAAoB,UAAAP,GAEAb,KAAAM,KAAAO,EACAb,KAAAI,QACAK,sBAAAT,KAAAU,KAAAC,KAAAX,SAIA,SAAAe,aAAAM,EAAAC,GACA,IAAAC,EAAAF,EAAAG,WAEA,KAAAD,EAAAE,OAAAH,IAAAA,EACAC,EAAA,IAAAA,EAGA,OAAAA,EAGA,IAAAG,UAAA,IAAA7B,UAAAX,SAAAC,cAAA","file":"main.js","sourcesContent":["// modals.js\n\nfunction modalEvent(button) {\n  button.addEventListener('click', () => {\n    const modalIgnition = button.getAttribute('data-modal-ignition');\n    const modal = document.querySelector(`[data-modal=${modalIgnition}]`);\n    const modalContainer = modal.querySelector('.modal-wrapper');\n    const modalClose = modal.querySelector('.modal-close');\n\n    /// Open modal when user clicks the modal button\n    modal.classList.toggle('open');\n\n    /// Prevents excess propagation of the opening event\n    modalContainer.addEventListener('click', (element) => {\n      element.stopPropagation()\n    });\n\n    /// Close modal when user clicks the \"X\" close button\n    modalClose.addEventListener('click', () => {\n      modal.classList.remove('open')\n    });\n\n    /// Close modal when user clicks anywhere on the modal (UNCOMMENT FOR USE)\n    // modal.addEventListener('click', () => {\n    //   modal.classList.remove('open')\n    // });\n  });\n}\n\nconst buttons = document.querySelectorAll(`button[data-modal-ignition]`);\n\nfor (let button of buttons) {\n  modalEvent(button);\n}\n","// stopwatch.js\n\nclass Stopwatch {\n\n  constructor(display) {\n    this.timerRunning = false;\n    this.timerDisplay = display;\n    this.reset();\n    this.print(this.times);\n  }\n\n  start() {\n    /// If the state of time isn't identified, set it using performance.now()\n    if (!this.time) {\n      this.time = performance.now();\n    }\n\n    /// If the timer's state isn't set to running...\n    if (!this.timerRunning) {\n      /// Run the timer\n      this.timerRunning = true;\n      /// Bind step() to requestAnimationFrame, to animate the browser\n      requestAnimationFrame(this.step.bind(this));\n    }\n  }\n\n  pause() {\n    /// Set the timer's state to not running\n    this.timerRunning = false;\n    /// Set the state of time to null\n    this.time = null;\n  }\n\n  reset() {\n    /// Initial state of displayed timer is all zeros\n    this.times = [0, 0, 0];\n  }\n\n  restart() {\n    this.start();\n    this.reset();\n  }\n\n  calculate(timestamp) {\n    /// Difference between the timestamp and the current state of time\n    let difference = timestamp - this.time;\n\n    /// A hundredth of a second is 100 milliseconds\n    this.times[2] += difference / 10;\n\n    /// A second is 100 hundredths of a second\n    if (this.times[2] >= 100) {\n      this.times[1] += 1;\n      this.times[2] -= 100;\n    }\n\n    /// A minute is 60 seconds\n    if (this.times[1] >= 60) {\n      this.times[0] += 1;\n      this.times[1] -= 60;\n    }\n  }\n\n  formatting(times) {\n    /// The format of the timer is 00:00:00\n    return `${formatHelper(times[0], 2)}:${formatHelper(times[1], 2)}:${formatHelper(Math.floor(times[2]), 2)}`;\n  }\n\n  print() {\n    /// Render the displayed timer using the returned value of formatting()\n    this.timerDisplay.innerText = this.formatting(this.times);\n  }\n\n  step(timestamp) {\n    /// If the timer's state isn't set to running, exit the function\n    if (!this.timerRunning) {\n      return;\n    }\n\n    /// Calculate the time using the timestamp passed in\n    this.calculate(timestamp);\n    /// Update the current state of time using the timestamp passed in\n    this.time = timestamp;\n    this.print();\n    requestAnimationFrame(this.step.bind(this));\n  }\n}\n\nfunction formatHelper(input, count) {\n  let result = input.toString();\n\n  for (result; result.length < count; --count) {\n    result = '0' + result;\n  }\n\n  return result;\n}\n\nlet stopwatch = new Stopwatch(document.querySelector('.stopwatch-display'));\n"]}